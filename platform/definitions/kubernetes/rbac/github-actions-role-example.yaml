name: Deploy Infrastructure with Crossplane

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
        type: string

env:
  AWS_REGION: ${{ github.event.inputs.region }}
  ENVIRONMENT: ${{ github.event.inputs.environment }}

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  validate:
    name: Validate Crossplane Resources
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Validate Crossplane configurations
        run: |
          echo "Validating Crossplane configurations for ${ENVIRONMENT} environment"
          python scripts/validate_crossplane.py --environment ${ENVIRONMENT} --region ${AWS_REGION}

  deploy-crossplane-provider:
    name: Deploy Crossplane AWS Provider
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/CorrospondDriftDeploymentRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Get management cluster kubeconfig
        run: |
          aws eks update-kubeconfig --name management-cluster --region ${{ env.AWS_REGION }}

      # The rest of your deployment steps remain the same
      - name: Install Crossplane AWS provider
        run: |
          echo "Installing/updating Crossplane AWS provider"
          kubectl apply -f IaC/crossplane/providers/aws-provider.yaml

          # Wait for provider to be healthy
          kubectl wait --for=condition=healthy --timeout=5m provider.pkg.crossplane.io/provider-aws

      - name: Configure AWS provider
        run: |
          echo "Configuring AWS provider with credentials"

          # Create IRSA credentials that Crossplane will use
          # This requires that the EKS cluster has OIDC provider configured
          # and appropriate service account permissions

          kubectl apply -f - <<EOF
          apiVersion: aws.crossplane.io/v1beta1
          kind: ProviderConfig
          metadata:
            name: aws-provider
          spec:
            credentials:
              source: InjectedIdentity
            region: ${{ env.AWS_REGION }}
          EOF

  # The rest of your jobs would follow the same pattern for AWS authentication
