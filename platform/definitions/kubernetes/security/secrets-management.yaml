apiVersion: v1
kind: Secret
metadata:
  name: prism-platform-secrets-template
  namespace: prism-platform
  annotations:
    description: "Template for Prism Platform secrets - not for actual use"
type: Opaque
# This is a placeholder for demonstration, not actual secrets
data:
  placeholder: cGxhY2Vob2xkZXI=  # base64 encoded 'placeholder'

---
# Secret Store CSI Driver Configuration for AWS Secrets Manager
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: aws-secrets-provider
  namespace: prism-platform
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "prism-platform-${ENVIRONMENT}"
        objectType: "secretsmanager"
        objectAlias: "app-secrets"
        jmesPath:
          - path: dbCredentials
            objectAlias: DB_CONNECTION_STRING
          - path: apiKeys.serviceOne
            objectAlias: SERVICE_ONE_API_KEY
          - path: apiKeys.serviceTwo
            objectAlias: SERVICE_TWO_API_KEY
          - path: jwtSecret
            objectAlias: JWT_SECRET
          - path: encryptionKeys.main
            objectAlias: ENCRYPTION_KEY
  secretObjects:
    - data:
        - key: DB_CONNECTION_STRING
          objectName: app-secrets
        - key: JWT_SECRET
          objectName: app-secrets
        - key: ENCRYPTION_KEY
          objectName: app-secrets
      secretName: application-secrets
      type: Opaque
    - data:
        - key: SERVICE_ONE_API_KEY
          objectName: app-secrets
        - key: SERVICE_TWO_API_KEY
          objectName: app-secrets
      secretName: external-service-secrets
      type: Opaque

---
# Example Pod that mounts secrets from AWS Secrets Manager
apiVersion: v1
kind: Pod
metadata:
  name: example-secrets-usage
  namespace: prism-platform
  annotations:
    description: "Example showing how to use secrets with CSI driver - for documentation only"
spec:
  serviceAccountName: prism-platform-security-sa
  containers:
  - name: app
    image: ${ECR_REGISTRY}/prism-platform/service:latest
    volumeMounts:
    - name: secrets-store
      mountPath: "/mnt/secrets"
      readOnly: true
    env:
    - name: DB_CONNECTION_STRING
      valueFrom:
        secretKeyRef:
          name: application-secrets
          key: DB_CONNECTION_STRING
    - name: JWT_SECRET
      valueFrom:
        secretKeyRef:
          name: application-secrets
          key: JWT_SECRET
  volumes:
  - name: secrets-store
    csi:
      driver: secrets-store.csi.k8s.io
      readOnly: true
      volumeAttributes:
        secretProviderClass: aws-secrets-provider

---
# Setup for using External Secrets Operator (alternative approach)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secretsmanager
  namespace: prism-platform
spec:
  provider:
    aws:
      service: SecretsManager
      region: ${AWS_REGION}
      auth:
        jwt:
          serviceAccountRef:
            name: prism-platform-security-sa

---
# External Secret using External Secrets Operator
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: prism-platform
spec:
  refreshInterval: "1h"
  secretStoreRef:
    name: aws-secretsmanager
    kind: SecretStore
  target:
    name: db-credentials
    creationPolicy: Owner
  data:
  - secretKey: username
    remoteRef:
      key: prism-platform-${ENVIRONMENT}
      property: dbCredentials.username
  - secretKey: password
    remoteRef:
      key: prism-platform-${ENVIRONMENT}
      property: dbCredentials.password
  - secretKey: host
    remoteRef:
      key: prism-platform-${ENVIRONMENT}
      property: dbCredentials.host
  - secretKey: port
    remoteRef:
      key: prism-platform-${ENVIRONMENT}
      property: dbCredentials.port
  - secretKey: database
    remoteRef:
      key: prism-platform-${ENVIRONMENT}
      property: dbCredentials.database

---
# Instructions for setting up AWS Secrets Manager and IAM permissions (in comments)
# 1. Create secret in AWS Secrets Manager with required structure
# aws secretsmanager create-secret \
#   --name prism-platform-${ENVIRONMENT} \
#   --description "Secrets for Prism Platform ${ENVIRONMENT} environment" \
#   --secret-string '{"dbCredentials":{"username":"dbuser","password":"REPLACE_ME","host":"db-host","port":"5432","database":"prism_platform_db"},"apiKeys":{"serviceOne":"REPLACE_ME","serviceTwo":"REPLACE_ME"},"jwtSecret":"REPLACE_ME","encryptionKeys":{"main":"REPLACE_ME"}}'
#
# 2. Create IAM Policy for accessing secrets
# aws iam create-policy \
#   --policy-name CorrospondDriftSecretsAccess \
#   --policy-document '{
#     "Version": "2012-10-17",
#     "Statement": [
#       {
#         "Effect": "Allow",
#         "Action": [
#           "secretsmanager:GetSecretValue",
#           "secretsmanager:DescribeSecret"
#         ],
#         "Resource": "arn:aws:secretsmanager:*:*:secret:prism-platform-*"
#       }
#     ]
#   }'
