apiVersion: v1
kind: ConfigMap
metadata:
  name: security-context-defaults
  namespace: prism-platform
data:
  # Default security context configuration to be used as a reference
  # These values should be applied to all deployments when possible
  default-security-context: |
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 3000
      fsGroup: 2000
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      seccompProfile:
        type: RuntimeDefault
      readOnlyRootFilesystem: true

---
# Example PodSecurityPolicy to enforce security standards
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: prism-platform-restricted
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName: 'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: true

---
# Security context constraint for data cells (more restrictive)
apiVersion: v1
kind: ConfigMap
metadata:
  name: data-cell-security-context
  namespace: prism-platform
data:
  security-context: |
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 3000
      fsGroup: 2000
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      seccompProfile:
        type: RuntimeDefault
      readOnlyRootFilesystem: true
      # Additional restrictions for data cells
      supplementalGroups: [3000, 4000]

---
# Sample deployment with hardened security context
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-hardened-deployment
  namespace: prism-platform
  labels:
    app: example-app
    security-profile: hardened
spec:
  replicas: 3
  selector:
    matchLabels:
      app: example-app
  template:
    metadata:
      labels:
        app: example-app
    spec:
      serviceAccountName: prism-platform-app-sa
      # Pod-level security context
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: app-container
        image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/prism-platform/app:v1.2.3
        # Container-level security context
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 3000
        resources:
          limits:
            cpu: "0.5"
            memory: "512Mi"
          requests:
            cpu: "0.1"
            memory: "128Mi"
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: config-volume
        configMap:
          name: app-config

---
# Pod Security Admission configuration
apiVersion: apiserver.config.k8s.io/v1
kind: AdmissionConfiguration
metadata:
  name: pod-security-configuration
leaveDefaultingAlone: false
plugins:
- name: PodSecurity
  configuration:
    apiVersion: pod-security.admission.config.k8s.io/v1beta1
    kind: PodSecurityConfiguration
    defaults:
      enforce: "restricted"
      enforce-version: "latest"
      audit: "restricted"
      audit-version: "latest"
      warn: "restricted"
      warn-version: "latest"
    exemptions:
      usernames: ["system:serviceaccount:kube-system:*"]
      runtimeClasses: []
      namespaces: ["kube-system", "istio-system", "observability-cell-namespace"]

---
# Implementation instructions for Pod Security Standards
#
# 1. Enable the PodSecurity admission controller in Kubernetes:
#    For K8s v1.22+, it's available by default
#    For EKS, update cluster configuration:
#    eksctl update cluster --name=prism-platform-cluster --region=us-west-2 \
#      --admission-plugins=PodSecurity
#
# 2. Apply namespace labels to enforce pod security standards:
#    kubectl label --overwrite ns prism-platform \
#      pod-security.kubernetes.io/enforce=restricted \
#      pod-security.kubernetes.io/audit=restricted \
#      pod-security.kubernetes.io/warn=restricted
#
# 3. Test with a non-compliant pod:
#    kubectl apply -f - <<EOF
#    apiVersion: v1
#    kind: Pod
#    metadata:
#      name: security-test-pod
#      namespace: prism-platform
#    spec:
#      containers:
#      - name: nginx
#        image: nginx:1.19
#        securityContext:
#          privileged: true
#    EOF
#
#    This should be rejected by the admission controller.
