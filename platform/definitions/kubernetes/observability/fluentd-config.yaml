apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: prism-platform
  labels:
    app: fluentd
data:
  fluent.conf: |
    # Fluentd main configuration

    # Set Fluentd to handle logs for all containers running in the cluster
    <source>
      @type tail
      @id in_tail_container_logs
      path /var/log/containers/*.log
      pos_file /var/log/fluentd-containers.log.pos
      tag kubernetes.*
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    # Filter Kubernetes metadata
    <filter kubernetes.**>
      @type kubernetes_metadata
      @id filter_kube_metadata
      kubernetes_url https://kubernetes.default.svc
      verify_ssl false
      ca_file /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      skip_labels false
      skip_container_metadata false
      skip_namespace_metadata false
      skip_master_url false
      watch true
    </filter>

    # Use regex to enhance log parsing
    <filter kubernetes.**>
      @type parser
      key_name log
      reserve_data true
      remove_key_name_field true
      <parse>
        @type multi_format
        <pattern>
          format json
          time_key time
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </pattern>
        <pattern>
          format regexp
          expression /^(?<time>\S+) (?<severity>[A-Z]+) (?<message>.+)$/
          time_key time
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </pattern>
        <pattern>
          format none
        </pattern>
      </parse>
    </filter>

    # Add cell information from Kubernetes labels
    <filter kubernetes.**>
      @type record_transformer
      enable_ruby
      <record>
        cell ${record.dig("kubernetes", "labels", "cell-type") || "unknown"}
        environment ${ENV["DEPLOYMENT_ENVIRONMENT"] || "unknown"}
        cluster_name ${ENV["CLUSTER_NAME"] || "unknown"}
        app ${record.dig("kubernetes", "labels", "app") || "unknown"}
        hostname ${record.dig("kubernetes", "host")}
        severity ${record["severity"] || "INFO"}
      </record>
    </filter>

    # Add timestamp processing to convert to proper format
    <filter kubernetes.**>
      @type record_transformer
      enable_ruby
      <record>
        timestamp ${time.strftime('%Y-%m-%dT%H:%M:%S.%L%z')}
      </record>
    </filter>

    # Cell-specific filters to add context
    <match kubernetes.var.log.containers.**logic**.log>
      @type rewrite_tag_filter
      <rule>
        key $.kubernetes.labels.app
        pattern /.+/
        tag cell.logic.${tag}
      </rule>
    </match>

    <match kubernetes.var.log.containers.**data**.log>
      @type rewrite_tag_filter
      <rule>
        key $.kubernetes.labels.app
        pattern /.+/
        tag cell.data.${tag}
      </rule>
    </match>

    <match kubernetes.var.log.containers.**security**.log>
      @type rewrite_tag_filter
      <rule>
        key $.kubernetes.labels.app
        pattern /.+/
        tag cell.security.${tag}
      </rule>
    </match>

    <match kubernetes.var.log.containers.**external**.log>
      @type rewrite_tag_filter
      <rule>
        key $.kubernetes.labels.app
        pattern /.+/
        tag cell.external.${tag}
      </rule>
    </match>

    <match kubernetes.var.log.containers.**channel**.log>
      @type rewrite_tag_filter
      <rule>
        key $.kubernetes.labels.app
        pattern /.+/
        tag cell.channel.${tag}
      </rule>
    </match>

    <match kubernetes.var.log.containers.**recommendation**.log>
      @type rewrite_tag_filter
      <rule>
        key $.kubernetes.labels.app
        pattern /.+/
        tag cell.recommendation.${tag}
      </rule>
    </match>

    <match kubernetes.var.log.containers.**integration**.log>
      @type rewrite_tag_filter
      <rule>
        key $.kubernetes.labels.app
        pattern /.+/
        tag cell.integration.${tag}
      </rule>
    </match>

    <match kubernetes.var.log.containers.**simulation**.log>
      @type rewrite_tag_filter
      <rule>
        key $.kubernetes.labels.app
        pattern /.+/
        tag cell.simulation.${tag}
      </rule>
    </match>

    <match kubernetes.var.log.containers.**observability**.log>
      @type rewrite_tag_filter
      <rule>
        key $.kubernetes.labels.app
        pattern /.+/
        tag cell.observability.${tag}
      </rule>
    </match>

    # Send logs to Elasticsearch by default
    <match **>
      @type elasticsearch
      @id out_es
      @log_level info
      include_tag_key true
      host elasticsearch-client
      port 9200
      scheme http
      ssl_verify false
      user elastic
      password "#{ENV['ELASTICSEARCH_PASSWORD']}"
      index_name logs-${record['cell']}.%Y.%m.%d
      type_name fluentd
      logstash_format true
      logstash_prefix logs-${record['cell']}
      <buffer tag, time, cell>
        @type file
        path /var/log/fluentd-buffers/kubernetes.logs.buffer
        flush_mode interval
        retry_type exponential_backoff
        flush_thread_count 2
        flush_interval 5s
        retry_forever true
        retry_max_interval 30
        chunk_limit_size 32M
        total_limit_size 8G
        overflow_action block
      </buffer>
    </match>
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: prism-platform
  labels:
    app: fluentd
spec:
  selector:
    matchLabels:
      app: fluentd
  template:
    metadata:
      labels:
        app: fluentd
    spec:
      serviceAccount: fluentd
      serviceAccountName: fluentd
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: fluentd
        image: fluent/fluentd-kubernetes-daemonset:v1.15-debian-elasticsearch7-1
        env:
          - name: FLUENT_ELASTICSEARCH_HOST
            value: "elasticsearch-client"
          - name: FLUENT_ELASTICSEARCH_PORT
            value: "9200"
          - name: FLUENT_ELASTICSEARCH_SCHEME
            value: "http"
          - name: ELASTICSEARCH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: elasticsearch-credentials
                key: password
                optional: true
          - name: DEPLOYMENT_ENVIRONMENT
            valueFrom:
              configMapKeyRef:
                name: prism-platform-config
                key: deployment_environment
                optional: true
          - name: CLUSTER_NAME
            valueFrom:
              configMapKeyRef:
                name: prism-platform-config
                key: cluster_name
                optional: true
        resources:
          limits:
            memory: 500Mi
            cpu: 500m
          requests:
            memory: 200Mi
            cpu: 200m
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: config-volume
          mountPath: /fluentd/etc/fluent.conf
          subPath: fluent.conf
        - name: buffer
          mountPath: /var/log/fluentd-buffers
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: config-volume
        configMap:
          name: fluentd-config
      - name: buffer
        emptyDir: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd
  namespace: prism-platform
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluentd
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluentd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fluentd
subjects:
- kind: ServiceAccount
  name: fluentd
  namespace: prism-platform
